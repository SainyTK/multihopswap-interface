/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockObservations } from "../MockObservations";

export class MockObservations__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _blockTimestamps: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _initializeds: [boolean, boolean, boolean, boolean],
    _observationCardinality: BigNumberish,
    _observationIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<MockObservations> {
    return super.deploy(
      _blockTimestamps,
      _initializeds,
      _observationCardinality,
      _observationIndex,
      overrides || {}
    ) as Promise<MockObservations>;
  }
  getDeployTransaction(
    _blockTimestamps: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _initializeds: [boolean, boolean, boolean, boolean],
    _observationCardinality: BigNumberish,
    _observationIndex: BigNumberish,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _blockTimestamps,
      _initializeds,
      _observationCardinality,
      _observationIndex,
      overrides || {}
    );
  }
  attach(address: string): MockObservations {
    return super.attach(address) as MockObservations;
  }
  connect(signer: Signer): MockObservations__factory {
    return super.connect(signer) as MockObservations__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockObservations {
    return new Contract(address, _abi, signerOrProvider) as MockObservations;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32[4]",
        name: "_blockTimestamps",
        type: "uint32[4]",
      },
      {
        internalType: "bool[4]",
        name: "_initializeds",
        type: "bool[4]",
      },
      {
        internalType: "uint16",
        name: "_observationCardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "_observationIndex",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "observations",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "int56",
        name: "",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102b53803806102b5833981810160405261014081101561003457600080fd5b5061010081015161012082015160808301919060005b60048110156100e45784816004811061005f57fe5b60200201516000826004811061007157fe5b600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055508381600481106100a657fe5b6020020151600182600481106100b857fe5b602081049091018054921515601f9092166101000a91820260ff9092021990921617905560010161004a565b506002805461ffff928316620100000263ffff0000199490931661ffff1990911617929092161790555061019690508061011f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063252c09d71461003b5780633850c7bd1461009f575b600080fd5b6100586004803603602081101561005157600080fd5b5035610105565b6040805163ffffffff909516855260069390930b602085015273ffffffffffffffffffffffffffffffffffffffff9091168383015215156060830152519081900360800190f35b6100a7610169565b6040805173ffffffffffffffffffffffffffffffffffffffff909816885260029690960b602088015261ffff9485168787015292841660608701529216608085015260ff90911660a0840152151560c0830152519081900360e00190f35b6000806000806000856004811061011857fe5b600891828204019190066004029054906101000a900463ffffffff166000806001886004811061014457fe5b602091828204019190069054906101000a900460ff1693509350935093509193509193565b600254600090819061ffff6201000082048116911682808091929394959656fea164736f6c6343000706000a";
